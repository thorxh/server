// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PhraseDao is the data access object for table phrase.
type PhraseDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns PhraseColumns // columns contains all the column names of Table for convenient usage.
}

// PhraseColumns defines and stores column names for table phrase.
type PhraseColumns struct {
	Id         string // 自增主键
	Phrase     string // 成语
	Pinyin     string // 拼音
	Explain    string // 解释
	CreateTime string // 数据创建时间
	ModifyTime string // 数据更新时间
}

// phraseColumns holds the columns for table phrase.
var phraseColumns = PhraseColumns{
	Id:         "id",
	Phrase:     "phrase",
	Pinyin:     "pinyin",
	Explain:    "explain",
	CreateTime: "create_time",
	ModifyTime: "modify_time",
}

// NewPhraseDao creates and returns a new DAO object for table data access.
func NewPhraseDao() *PhraseDao {
	return &PhraseDao{
		group:   "default",
		table:   "phrase",
		columns: phraseColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PhraseDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PhraseDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PhraseDao) Columns() PhraseColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PhraseDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PhraseDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PhraseDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
